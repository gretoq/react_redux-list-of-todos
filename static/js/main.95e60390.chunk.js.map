{"version":3,"sources":["features/currentTodo/types.ts","features/currentTodo/reducer.ts","types/enums/TodoStatusTypes.ts","features/filter/types.ts","features/filter/reducer.ts","features/todos/types.ts","features/todos/reducer.ts","app/store.ts","app/hooks.ts","features/currentTodo/actions.ts","features/currentTodo/selectors.ts","components/TodoRow/TodoRow.tsx","components/TodoList/TodoList.tsx","features/filter/actions.ts","features/filter/selectors.ts","components/TodoFilter/TodoFilter.tsx","utils/helpers/getStatusValue.ts","api.ts","components/Loader/Loader.tsx","components/ModalCard/ModalCard.tsx","components/TodoModal/TodoModal.tsx","features/todos/actions.ts","features/todos/selectors.ts","App.tsx","utils/helpers/filterTodos.ts","index.tsx"],"names":["CurrentTodoActions","TodoStatusTypes","FilterActions","currentTodoReducer","state","action","type","REMOVE","SET","payload","TodosActions","initialState","query","status","ALL","filterReducer","SET_STATUS","SET_QUERY","CLEAR_QUERY","todos","isLoaded","isError","todosReducer","ADD","LOADED","ERROR","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","actions","todo","selectCurrentTodo","TodoRow","id","isSelectedTodo","completed","title","onSelect","className","cn","onClick","TodoList","selectedTodo","dispatch","handlerSelectTodo","todoId","find","currentTodoActions","hasTodos","useMemo","length","map","selectFilter","TodoFilter","isShowClearButton","Boolean","onSubmit","event","preventDefault","onChange","upperCasedValue","currentTarget","value","toUpperCase","statusTodo","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","ModalCard","user","name","email","actionsCurrentTodo","classNames","href","TodoModal","useState","setUser","setIsLoaded","useEffect","fetchUser","a","userId","fetchedUser","window","console","log","isModalCard","selectTodos","App","fetchTodo","fetchedTodos","filteredTodos","normalizedQuery","toLowerCase","includes","getFilteredTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95e60390.chunk.js","sourcesContent":["import { Todo } from '../../types/Todo';\n\nexport enum CurrentTodoActions {\n  SET = 'currentTodo/SET',\n  REMOVE = 'currentTodo/REMOVE',\n}\n\nexport type RemoveTodoAction = { type: CurrentTodoActions.REMOVE; };\n\nexport type SetTodoAction = {\n  type: CurrentTodoActions.SET;\n  payload: Todo;\n};\n\nexport type State = Todo | null;\nexport type Action = SetTodoAction | RemoveTodoAction;\n","import {\n  CurrentTodoActions,\n  State,\n  Action,\n} from './types';\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case CurrentTodoActions.REMOVE:\n      return null;\n\n    case CurrentTodoActions.SET:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","export enum TodoStatusTypes {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { TodoStatusTypes } from '../../types/enums/TodoStatusTypes';\n\nexport enum FilterActions {\n  SET_STATUS = 'filter/SET_STATUS',\n  SET_QUERY = 'filter/SET_QUERY',\n  CLEAR_QUERY = 'filter/CLEAR_QUERY',\n}\n\nexport type ValueOf<T> = T[keyof T];\n\nexport type StatusActionType = {\n  type: FilterActions.SET_STATUS;\n  payload: ValueOf<TodoStatusTypes>;\n};\n\nexport type SetQueryActionType = {\n  type: FilterActions.SET_QUERY;\n  payload: string;\n};\n\nexport type ClearQueryActionType = {\n  type: FilterActions.CLEAR_QUERY;\n  payload: string;\n};\n\nexport type State = {\n  query: string;\n  status: ValueOf<TodoStatusTypes>;\n};\n\nexport type Action\n= StatusActionType | SetQueryActionType | ClearQueryActionType;\n","import { TodoStatusTypes } from '../../types/enums/TodoStatusTypes';\nimport {\n  FilterActions,\n  State,\n  Action,\n} from './types';\n\nconst initialState: State = {\n  query: '',\n  status: TodoStatusTypes.ALL,\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case FilterActions.SET_STATUS:\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case FilterActions.SET_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case FilterActions.CLEAR_QUERY:\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../../types/Todo';\n\nexport enum TodosActions {\n  ADD = 'todos/ADD',\n  LOADED = 'todos/LOADED',\n  ERROR = 'todos/ERROR',\n}\n\nexport type AddAction = {\n  type: TodosActions.ADD;\n  payload: Todo[];\n};\n\nexport type LoadedAction = {\n  type: TodosActions.LOADED;\n  payload: boolean;\n};\n\nexport type ErrorAction = {\n  type: TodosActions.ERROR;\n  payload: boolean;\n};\n\nexport type Action = AddAction | LoadedAction | ErrorAction;\n\nexport type State = {\n  todos: Todo[];\n  isLoaded: boolean;\n  isError: boolean;\n};\n","import {\n  TodosActions, State,\n  Action,\n} from './types';\n\nconst initialState: State = {\n  todos: [],\n  isLoaded: false,\n  isError: false,\n};\nconst todosReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case TodosActions.ADD:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case TodosActions.LOADED:\n      return {\n        ...state,\n        isLoaded: action.payload,\n      };\n\n    case TodosActions.ERROR:\n      return {\n        ...state,\n        isError: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo/reducer';\nimport filterReducer from '../features/filter/reducer';\nimport todosReducer from '../features/todos/reducer';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from '../../types/Todo';\nimport {\n  RemoveTodoAction,\n  CurrentTodoActions,\n  SetTodoAction,\n} from './types';\n\nconst removeTodo = (): RemoveTodoAction => ({\n  type: CurrentTodoActions.REMOVE,\n});\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: CurrentTodoActions.SET,\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n","import { RootState } from '../../app/store';\n\nexport const selectCurrentTodo = (state: RootState) => state.currentTodo;\n","import cn from 'classnames';\nimport React from 'react';\n\ninterface Props {\n  id: number;\n  isSelectedTodo: boolean;\n  completed: boolean;\n  title: string;\n  onSelect: (id: number) => void;\n}\n\nexport const TodoRow: React.FC<Props> = ({\n  id,\n  isSelectedTodo,\n  completed,\n  title,\n  onSelect,\n}) => (\n  <tr\n    data-cy=\"todo\"\n    className={cn({\n      'has-background-info-light': isSelectedTodo,\n    })}\n  >\n    <td className=\"is-vcentered\">\n      {id}\n    </td>\n\n    <td className=\"is-vcentered\">\n      {completed && (\n        <span className=\"icon\" data-cy=\"iconCompleted\">\n          <i className=\"fas fa-check\" />\n        </span>\n      )}\n    </td>\n\n    <td className=\"is-vcentered is-expanded\">\n      <p\n        className={cn({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n      >\n        {title}\n      </p>\n    </td>\n\n    <td className=\"has-text-right is-vcentered\">\n      <button\n        data-cy=\"selectButton\"\n        className=\"button\"\n        type=\"button\"\n        onClick={() => onSelect(id)}\n      >\n        <span className=\"icon\">\n          <i\n            className={cn(\n              'far',\n              {\n                'fa-eye': !isSelectedTodo,\n                'fa-eye-slash': isSelectedTodo,\n              },\n            )}\n          />\n        </span>\n      </button>\n    </td>\n  </tr>\n);\n","import React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { selectCurrentTodo } from '../../features/currentTodo';\nimport {\n  actions as currentTodoActions,\n} from '../../features/currentTodo/actions';\nimport { Todo } from '../../types/Todo';\nimport { TodoRow } from '../TodoRow';\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const selectedTodo = useAppSelector(selectCurrentTodo);\n  const dispatch = useAppDispatch();\n  const handlerSelectTodo = (todoId: number) => {\n    const todo = todos.find(({ id }) => id === todoId);\n\n    if (todo) {\n      dispatch(currentTodoActions.setTodo(todo));\n    }\n  };\n\n  const hasTodos = useMemo(() => {\n    return todos.length > 0;\n  }, [todos]);\n\n  return (\n    <>\n      {!hasTodos && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {hasTodos && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(({ id, completed, title }) => (\n              <TodoRow\n                key={id}\n                id={id}\n                completed={completed}\n                title={title}\n                isSelectedTodo={selectedTodo?.id === id}\n                onSelect={handlerSelectTodo}\n              />\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { TodoStatusTypes } from '../../types/enums/TodoStatusTypes';\nimport {\n  ValueOf,\n  StatusActionType,\n  FilterActions,\n  SetQueryActionType,\n  ClearQueryActionType,\n} from './types';\n\nconst setStatus = (status: ValueOf<TodoStatusTypes>): StatusActionType => ({\n  type: FilterActions.SET_STATUS,\n  payload: status,\n});\nconst setQuery = (query: string): SetQueryActionType => ({\n  type: FilterActions.SET_QUERY,\n  payload: query,\n});\nconst clearQuery = (): ClearQueryActionType => ({\n  type: FilterActions.CLEAR_QUERY,\n  payload: '',\n});\n\nexport const actions = {\n  setStatus,\n  setQuery,\n  clearQuery,\n};\n","import { RootState } from '../../app/store';\n\nexport const selectFilter = (state: RootState) => state.filter;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as FilterActions } from '../../features/filter/actions';\nimport { TodoStatusTypes } from '../../types/enums/TodoStatusTypes';\nimport { getStatusValue } from '../../utils/helpers/getStatusValue';\nimport { selectFilter } from '../../features/filter/selectors';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(selectFilter);\n  const dispatch = useAppDispatch();\n\n  const handlerQuery = (\n    event: React.FormEvent<HTMLInputElement>,\n  ) => {\n    dispatch(FilterActions.setQuery(event.currentTarget.value));\n  };\n\n  const handlerResetQuery = () => {\n    dispatch(FilterActions.clearQuery());\n  };\n\n  const handlerStatusChange = (\n    event: React.FormEvent<HTMLSelectElement>,\n  ) => {\n    const { value } = event.currentTarget;\n    const upperCasedValue = value.toUpperCase();\n    const statusTodo\n    = getStatusValue(upperCasedValue as keyof typeof TodoStatusTypes);\n\n    dispatch(FilterActions.setStatus(statusTodo));\n  };\n\n  const isShowClearButton = Boolean(query);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handlerStatusChange}\n          >\n            <option value={TodoStatusTypes.ALL}>All</option>\n            <option value={TodoStatusTypes.ACTIVE}>Active</option>\n            <option value={TodoStatusTypes.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handlerQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {isShowClearButton && (\n            <button\n              aria-label=\"Clear query input\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handlerResetQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { TodoStatusTypes } from '../../types/enums/TodoStatusTypes';\n\nexport function getStatusValue(key: keyof typeof TodoStatusTypes): string {\n  return TodoStatusTypes[key];\n}\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL\n= 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUserById = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport {\n  actions as actionsCurrentTodo,\n} from '../../features/currentTodo/actions';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n  todo: Todo;\n}\n\nexport const ModalCard: React.FC<Props> = ({ user, todo }) => {\n  const { name, email } = user;\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n  const dispatch = useAppDispatch();\n\n  const handlerCloseModal = () => {\n    dispatch(actionsCurrentTodo.removeTodo());\n  };\n\n  return (\n    <div className=\"modal-card\">\n      <header className=\"modal-card-head\">\n        <div\n          className=\"modal-card-title has-text-weight-medium\"\n          data-cy=\"modal-header\"\n        >\n          Todo #\n          {id}\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"delete\"\n          data-cy=\"modal-close\"\n          aria-label=\"Close modal\"\n          onClick={handlerCloseModal}\n        />\n      </header>\n\n      <div className=\"modal-card-body\">\n        <p className=\"block\" data-cy=\"modal-title\">\n          {title}\n        </p>\n\n        <p className=\"block\" data-cy=\"modal-user\">\n          <strong\n            className={classNames({\n              'has-text-success': completed,\n              'has-text-danger': !completed,\n            })}\n          >\n            {completed ? (\n              'Done'\n            ) : (\n              'Planned'\n            )}\n          </strong>\n\n          {' by '}\n\n          <a href={email}>\n            {name}\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserById } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { selectCurrentTodo } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { ModalCard } from '../ModalCard/ModalCard';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const currentTodo = useAppSelector(selectCurrentTodo);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      if (!currentTodo) {\n        return;\n      }\n\n      try {\n        const fetchedUser = await getUserById(currentTodo.userId);\n\n        setUser(fetchedUser);\n      } catch {\n        window.console.log('error');\n      } finally {\n        setIsLoaded(true);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  const isModalCard = isLoaded && user && currentTodo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoaded && <Loader />}\n\n      {isModalCard && <ModalCard user={user} todo={currentTodo} />}\n    </div>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport {\n  AddAction,\n  TodosActions,\n  LoadedAction,\n  ErrorAction,\n} from './types';\n\nconst addTodos = (todos: Todo[]): AddAction => ({\n  type: TodosActions.ADD,\n  payload: todos,\n});\n\nconst setIsLoaded = (isLoaded: boolean): LoadedAction => ({\n  type: TodosActions.LOADED,\n  payload: isLoaded,\n});\n\nconst setIsError = (isError: boolean): ErrorAction => ({\n  type: TodosActions.ERROR,\n  payload: isError,\n});\n\nexport const actions = { addTodos, setIsLoaded, setIsError };\n","import { RootState } from '../../app/store';\n\nexport const selectTodos = (state: RootState) => state.todos;\n","import React, { useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as TodosActions } from './features/todos/actions';\nimport { getFilteredTodos } from './utils/helpers/filterTodos';\nimport { selectTodos } from './features/todos';\nimport { selectCurrentTodo } from './features/currentTodo';\nimport { selectFilter } from './features/filter';\n\nexport const App: React.FC = () => {\n  const { todos, isError, isLoaded } = useAppSelector(selectTodos);\n  const selectedTodo = useAppSelector(selectCurrentTodo);\n  const filter = useAppSelector(selectFilter);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const fetchTodo = async () => {\n      try {\n        const fetchedTodos = await getTodos();\n\n        dispatch(TodosActions.addTodos(fetchedTodos));\n      } catch {\n        dispatch(TodosActions.setIsError(true));\n      } finally {\n        dispatch(TodosActions.setIsLoaded(true));\n      }\n    };\n\n    fetchTodo();\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    return getFilteredTodos(todos, filter);\n  }, [todos, filter]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded ? (\n                <TodoList todos={filteredTodos} />\n              ) : (\n                <Loader />\n              )}\n\n              {isError && (\n                <p className=\"notification is-warning\">\n                  Something went wrong, please try again later\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import { State as FilterTodosType } from '../../features/filter/types';\nimport { TodoStatusTypes } from '../../types/enums/TodoStatusTypes';\nimport { Todo } from '../../types/Todo';\n\nexport const getFilteredTodos = (todos: Todo[], filter: FilterTodosType) => {\n  const { status, query } = filter;\n\n  let filteredTodos = todos;\n\n  switch (status) {\n    case TodoStatusTypes.ACTIVE:\n      filteredTodos = todos.filter(({ completed }) => !completed);\n      break;\n\n    case TodoStatusTypes.COMPLETED:\n      filteredTodos = todos.filter(({ completed }) => completed);\n      break;\n\n    default:\n      break;\n  }\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase();\n\n    filteredTodos = filteredTodos.filter(({ title }) => {\n      const normalizedTitle = title.toLowerCase();\n\n      return normalizedTitle.includes(normalizedQuery);\n    });\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}