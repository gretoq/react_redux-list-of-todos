{"version":3,"sources":["types/enums/TodoStatusTypes.ts","features/filter.ts","features/currentTodo.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoRow/TodoRow.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","utils/helpers/getStatusValue.ts","api.ts","components/Loader/Loader.tsx","components/ModalCard/ModalCard.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/helpers/filterTodos.ts","index.tsx"],"names":["TodoStatusTypes","FilterActions","actions","todo","type","payload","currentTodoReducer","state","action","status","SET_STATUS","query","SET_QUERY","CLEAR_QUERY","initialState","ALL","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoRow","id","isSelectedTodo","completed","title","onSelect","className","classNames","onClick","TodoList","selectedTodo","dispatchCurrentTodo","handlerSelectTodo","todoId","find","currentTodoActions","hasTodos","length","map","TodoFilter","dispatchFilter","isShowClearButton","Boolean","onSubmit","event","preventDefault","onChange","upperCasedValue","currentTarget","value","toUpperCase","statusTodo","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","ModalCard","user","name","email","actionsCurrentTodo","href","TodoModal","useState","setUser","isLoaded","setIsLoaded","useEffect","fetchUser","a","userId","fetchedUser","window","console","log","isModalCard","App","dispatchTodos","fetchTodo","fetchedTodos","TodosActions","filteredTodos","normalizedQuery","toLowerCase","includes","getFilteredTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd3ae6f2.chunk.js","sourcesContent":["export enum TodoStatusTypes {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { TodoStatusTypes } from '../types/enums/TodoStatusTypes';\n\nexport enum FilterActions {\n  SET_STATUS = 'filter/SET_STATUS',\n  SET_QUERY = 'filter/SET_QUERY',\n  CLEAR_QUERY = 'filter/CLEAR_QUERY',\n}\n\ntype ValueOf<T> = T[keyof T];\n\ntype StatusActionType = {\n  type: FilterActions.SET_STATUS,\n  payload: ValueOf<TodoStatusTypes>,\n};\n\ntype SetQueryActionType = {\n  type: FilterActions.SET_QUERY,\n  payload: string,\n};\n\ntype ClearQueryActionType = {\n  type: FilterActions.CLEAR_QUERY,\n  payload: string,\n};\n\nconst setStatus = (status: ValueOf<TodoStatusTypes>): StatusActionType => ({\n  type: FilterActions.SET_STATUS,\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryActionType => ({\n  type: FilterActions.SET_QUERY,\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryActionType => ({\n  type: FilterActions.CLEAR_QUERY,\n  payload: '',\n});\n\nexport const actions = {\n  setStatus,\n  setQuery,\n  clearQuery,\n};\n\nexport type State = {\n  query: string,\n  status: ValueOf<TodoStatusTypes>,\n};\n\nconst initialState: State = {\n  query: '',\n  status: TodoStatusTypes.ALL,\n};\n\ntype Action = StatusActionType | SetQueryActionType | ClearQueryActionType;\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case FilterActions.SET_STATUS:\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case FilterActions.SET_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case FilterActions.CLEAR_QUERY:\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = {\n  type: 'todos/ADD',\n  payload: Todo[],\n};\n\nconst addTodos = (todos: Todo[]): AddAction => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { addTodos };\n\ntype Action = AddAction;\ntype State = Todo[];\n\nconst initialState: Todo[] = [];\n\nconst todosReducer = (\n  state: State = initialState,\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\n\ninterface Props {\n  id: number;\n  isSelectedTodo: boolean;\n  completed: boolean;\n  title: string;\n  onSelect: (id: number) => void;\n}\n\nexport const TodoRow: React.FC<Props> = ({\n  id,\n  isSelectedTodo,\n  completed,\n  title,\n  onSelect,\n}) => (\n  <tr\n    data-cy=\"todo\"\n    className={classNames({\n      'has-background-info-light': isSelectedTodo,\n    })}\n  >\n    <td className=\"is-vcentered\">\n      {id}\n    </td>\n\n    <td className=\"is-vcentered\">\n      {completed && (\n        <span className=\"icon\" data-cy=\"iconCompleted\">\n          <i className=\"fas fa-check\" />\n        </span>\n      )}\n    </td>\n\n    <td className=\"is-vcentered is-expanded\">\n      <p\n        className={classNames({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n      >\n        {title}\n      </p>\n    </td>\n\n    <td className=\"has-text-right is-vcentered\">\n      <button\n        data-cy=\"selectButton\"\n        className=\"button\"\n        type=\"button\"\n        onClick={() => onSelect(id)}\n      >\n        <span className=\"icon\">\n          <i\n            className={classNames(\n              'far',\n              {\n                'fa-eye': !isSelectedTodo,\n                'fa-eye-slash': isSelectedTodo,\n              },\n            )}\n          />\n        </span>\n      </button>\n    </td>\n  </tr>\n);\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { TodoRow } from '../TodoRow';\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatchCurrentTodo = useAppDispatch();\n  const handlerSelectTodo = (todoId: number) => {\n    const todo = todos.find(({ id }) => id === todoId);\n\n    if (todo) {\n      dispatchCurrentTodo(currentTodoActions.setTodo(todo));\n    }\n  };\n\n  const hasTodos = todos.length > 0;\n\n  return (\n    <>\n      {!hasTodos && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {hasTodos && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(({ id, completed, title }) => {\n              const isSelectedTodo = selectedTodo?.id === id;\n\n              return (\n                <TodoRow\n                  key={id}\n                  id={id}\n                  completed={completed}\n                  title={title}\n                  isSelectedTodo={isSelectedTodo}\n                  onSelect={handlerSelectTodo}\n                />\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as FilterActions } from '../../features/filter';\nimport { TodoStatusTypes } from '../../types/enums/TodoStatusTypes';\nimport { getStatusValue } from '../../utils/helpers/getStatusValue';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(state => state.filter);\n  const dispatchFilter = useAppDispatch();\n\n  const handlerQuery = (\n    event: React.FormEvent<HTMLInputElement>,\n  ) => {\n    dispatchFilter(FilterActions.setQuery(event.currentTarget.value));\n  };\n\n  const handlerResetQuery = () => {\n    dispatchFilter(FilterActions.clearQuery());\n  };\n\n  const handlerStatusChange = (\n    event: React.FormEvent<HTMLSelectElement>,\n  ) => {\n    const { value } = event.currentTarget;\n    const upperCasedValue = value.toUpperCase();\n    const statusTodo\n    = getStatusValue(upperCasedValue as keyof typeof TodoStatusTypes);\n\n    dispatchFilter(FilterActions.setStatus(statusTodo));\n  };\n\n  const isShowClearButton = Boolean(query);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handlerStatusChange}\n          >\n            {/* {Object.entries(TodoStatusTypes).map(([key, value]) => (\n              <option key={key} value={key}>{value}</option>\n            ))} */}\n\n            <option value={TodoStatusTypes.ALL}>All</option>\n            <option value={TodoStatusTypes.ACTIVE}>Active</option>\n            <option value={TodoStatusTypes.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handlerQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {isShowClearButton && (\n            <button\n              aria-label=\"Clear query input\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handlerResetQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { TodoStatusTypes } from '../../types/enums/TodoStatusTypes';\n\nexport function getStatusValue(key: keyof typeof TodoStatusTypes): string {\n  return TodoStatusTypes[key];\n}\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUserById = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n  todo: Todo;\n}\n\nexport const ModalCard: React.FC<Props> = ({ user, todo }) => {\n  const { name, email } = user;\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n  const dispatchCurrentTodo = useAppDispatch();\n\n  const handlerCloseModal = () => {\n    dispatchCurrentTodo(actionsCurrentTodo.removeTodo());\n  };\n\n  return (\n    <div className=\"modal-card\">\n      <header className=\"modal-card-head\">\n        <div\n          className=\"modal-card-title has-text-weight-medium\"\n          data-cy=\"modal-header\"\n        >\n          {`Todo #${id}`}\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"delete\"\n          data-cy=\"modal-close\"\n          aria-label=\"Close modal\"\n          onClick={handlerCloseModal}\n        />\n      </header>\n\n      <div className=\"modal-card-body\">\n        <p className=\"block\" data-cy=\"modal-title\">\n          {title}\n        </p>\n\n        <p className=\"block\" data-cy=\"modal-user\">\n          {completed ? (\n            <strong className=\"has-text-success\">Done</strong>\n          ) : (\n            <strong className=\"has-text-danger\">Planned</strong>\n          )}\n\n          {' by '}\n\n          <a href={email}>\n            {name}\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserById } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { ModalCard } from '../ModalCard/ModalCard';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      if (!currentTodo) {\n        return;\n      }\n\n      try {\n        const fetchedUser = await getUserById(currentTodo.userId);\n\n        setUser(fetchedUser);\n      } catch {\n        window.console.log('error');\n      } finally {\n        setIsLoaded(true);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  const isModalCard = isLoaded && user && currentTodo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoaded && <Loader />}\n\n      {isModalCard && <ModalCard user={user} todo={currentTodo} />}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as TodosActions } from './features/todos';\nimport { getFilteredTodos } from './utils/helpers/filterTodos';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const filter = useAppSelector(state => state.filter);\n  const dispatchTodos = useAppDispatch();\n\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    const fetchTodo = async () => {\n      try {\n        const fetchedTodos = await getTodos();\n\n        dispatchTodos(TodosActions.addTodos(fetchedTodos));\n      } catch {\n        window.console.log('error message');\n      } finally {\n        setIsLoaded(true);\n      }\n    };\n\n    fetchTodo();\n  }, []);\n\n  const filteredTodos = getFilteredTodos(todos, filter);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded ? (\n                <TodoList todos={filteredTodos} />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import { State as FilterTodosType } from '../../features/filter';\nimport { TodoStatusTypes } from '../../types/enums/TodoStatusTypes';\nimport { Todo } from '../../types/Todo';\n\nexport const getFilteredTodos = (todos: Todo[], filter: FilterTodosType) => {\n  const { status, query } = filter;\n\n  let filteredTodos;\n\n  switch (status) {\n    case TodoStatusTypes.ACTIVE:\n      filteredTodos = todos.filter(({ completed }) => !completed);\n      break;\n\n    case TodoStatusTypes.COMPLETED:\n      filteredTodos = todos.filter(({ completed }) => completed);\n      break;\n\n    default:\n      filteredTodos = todos;\n      break;\n  }\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase();\n\n    filteredTodos = filteredTodos.filter(({ title }) => {\n      const normalizedTitle = title.toLowerCase();\n\n      return normalizedTitle.includes(normalizedQuery);\n    });\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}